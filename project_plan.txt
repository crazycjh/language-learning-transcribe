專案計畫：逐字稿切割與 OpenAI 整合

1.  **網頁介面建立**
    *   技術規格：使用 Shadcn UI 和 Tailwind CSS 建立網頁介面。
    *   功能：
        *   檔案拖曳區域：允許使用者拖曳文字檔案（.txt, .vtt）到網頁上。
            *   支援檔案類型：.txt, .vtt
            *   拖曳區域樣式：使用 Tailwind CSS 設計，提供視覺回饋（例如：變色、文字提示）。
        *   逐字稿顯示區域：顯示原始逐字稿內容。
            *   樣式：可調整字體大小、行距。
        *   切割段落顯示區域：顯示切割後的文字段落。
            *   樣式：每個段落使用獨立的區塊顯示，方便使用者閱讀和選擇。
        *   OpenAI 回應顯示區域：顯示 OpenAI API 的回應。
            *   樣式：清楚呈現回應內容，例如：JSON 格式化顯示。
    *   元件：
        *   `FileDropArea`：處理檔案拖曳事件。
        *   `TranscriptDisplay`：顯示原始逐字稿。
        *   `ChunkDisplay`：顯示切割後的段落。
        *   `OpenAIResponseDisplay`：顯示 OpenAI API 回應。

2.  **檔案讀取功能**
    *   技術規格：使用 JavaScript `FileReader` API 讀取檔案內容。
    *   流程：
        1.  使用者拖曳檔案到 `FileDropArea`。
        2.  `FileDropArea` 觸發 `onDrop` 事件。
        3.  使用 `FileReader` 異步讀取檔案內容。
        4.  讀取完成後，將內容傳遞給 `TranscriptDisplay` 顯示。
    *   錯誤處理：
        *   檔案讀取失敗：顯示錯誤訊息。
        *   不支援的檔案類型：顯示錯誤訊息。

3.  **檔案類型驗證**
    *   技術規格：使用 JavaScript 檢查檔案的 `type` 屬性。
    *   驗證規則：
        *   只允許 `.txt` 和 `.vtt` 檔案。
    *   錯誤處理：
        *   如果檔案類型不符合，顯示錯誤訊息，並清除檔案拖曳區域的內容。

4.  **逐字稿切割功能**
    *   技術規格：使用 `spilit.js` 程式碼切割逐字稿。
    *   流程：
        1.  從 `TranscriptDisplay` 取得原始逐字稿內容。
        2.  呼叫 `splitTranscriptByTokenLimit` 函數，設定 `maxTokens` 參數（預設值：1800）。
        3.  將切割後的段落傳遞給 `ChunkDisplay` 顯示。
    *   參數設定：
        *   `maxTokens`：可調整的最大 Token 數。

5.  **OpenAI API 整合**
    *   技術規格：
        *   使用 JavaScript `fetch` API 或 `axios` 庫發送 API 請求。
        *   使用環境變數儲存 OpenAI API 金鑰 (`OPENAI_API_KEY`)。
    *   流程：
        1.  使用者在 `ChunkDisplay` 選擇要傳送的段落。
        2.  建立 API 請求：
            *   方法：`POST`
            *   端點：`https://api.openai.com/v1/completions` (範例，根據實際 API 調整)
            *   請求頭：
                *   `Content-Type`: `application/json`
                *   `Authorization`: `Bearer ${process.env.OPENAI_API_KEY}`
            *   請求體：
                ```json
                {
                  "model": "text-davinci-003", (範例，根據實際 API 調整)
                  "prompt": "使用者選擇的段落",
                  "max_tokens": 150, (範例，根據實際 API 調整)
                  "temperature": 0.7 (範例，根據實際 API 調整)
                }
                ```
        3.  發送 API 請求。
        4.  接收 API 回應。
        5.  將 API 回應傳遞給 `OpenAIResponseDisplay` 顯示。
    *   錯誤處理：
        *   API 請求失敗：
            *   顯示錯誤訊息，包含錯誤碼和錯誤訊息。
            *   記錄錯誤日誌。
        *   API 回應格式錯誤：
            *   顯示錯誤訊息。
            *   記錄錯誤日誌。
    *   安全性考量：
        *   不要在前端程式碼中直接暴露 API 金鑰。
        *   使用伺服器端代理來發送 API 請求，避免跨域問題。

6.  **使用者互動**
    *   段落選擇：允許使用者選擇一個或多個段落。
        *   使用 Checkbox 或其他 UI 元素實現段落選擇功能。
    *   傳送按鈕：提供一個按鈕，使用者點擊後將選擇的段落傳送到 OpenAI API。
    *   載入指示器：在 API 請求期間顯示載入指示器。

7.  **錯誤處理**
    *   全域錯誤處理：使用 `try...catch` 區塊捕獲並處理所有可能發生的錯誤。
    *   錯誤訊息顯示：使用 UI 元素（例如：Alert）顯示錯誤訊息。

8.  **樣式設計**
    *   整體風格：現代感、簡約、黑底。
    *   配色方案：
        *   背景：深黑色 (`#000000` 或 `#121212`)
        *   文字：亮白色 (`#FFFFFF` 或 `#F5F5F5`)
        *   強調色：鮮豔的藍色或綠色 (`#007BFF` 或 `#28A745`)
        *   使用 Tailwind CSS 的 `dark` 模式，實現深色主題。
    *   字體：
        *   使用無襯線字體，例如 `Arial` 或 `Helvetica Neue`。
        *   字體大小：適中，易於閱讀。
    *   間距：
        *   使用適當的間距，使內容清晰易讀。
        *   行距：1.5 倍行高。
    *   響應式設計：
        *   使用 Tailwind CSS 的響應式工具，確保網頁在不同尺寸的螢幕上都能正常顯示。
        *   針對移動設備進行優化。
    *   元件樣式：
        *   按鈕：使用圓角、陰影和 hover 效果。
        *   輸入框：使用深色背景和淺色文字。
        *   卡片：使用深色背景和淺色邊框。

9.  **YouTube 影片處理功能**
    *   技術規格：
        *   使用 HTML `<input>` 元素建立 YouTube 影片網址輸入欄位。
        *   使用 HTML `<button>` 元素建立觸發 API 呼叫的按鈕。
        *   使用 JavaScript `fetch` API 發送 API 請求。
        *   使用 Server-Sent Events (SSE) 接收進度更新。
    *   功能：
        *   提供一個輸入欄位，讓使用者傳入 YouTube 影片網址。
        *   點擊按鈕後，發送 API 請求到後端。
        *   顯示下載進度、轉檔進度、轉錄進度。
    *   元件：
        *   `YouTubeURLInput`：YouTube 影片網址輸入欄位。
        *   `ProcessButton`：觸發 API 呼叫的按鈕。
        *   `ProgressBar`：顯示進度。
專案計畫：逐字稿切割與 OpenAI 整合

1.  **網頁介面建立**
    *   技術規格：使用 Shadcn UI 和 Tailwind CSS 建立網頁介面。
    *   功能：
        *   檔案拖曳區域：允許使用者拖曳文字檔案（.txt, .vtt）到網頁上。
            *   支援檔案類型：.txt, .vtt
            *   拖曳區域樣式：使用 Tailwind CSS 設計，提供視覺回饋（例如：變色、文字提示）。
        *   逐字稿顯示區域：顯示原始逐字稿內容。
            *   樣式：可調整字體大小、行距。
        *   切割段落顯示區域：顯示切割後的文字段落。
            *   樣式：每個段落使用獨立的區塊顯示，方便使用者閱讀和選擇。
        *   OpenAI 回應顯示區域：顯示 OpenAI API 的回應。
            *   樣式：清楚呈現回應內容，例如：JSON 格式化顯示。
    *   元件：
        *   `FileDropArea`：處理檔案拖曳事件。
        *   `TranscriptDisplay`：顯示原始逐字稿。
        *   `ChunkDisplay`：顯示切割後的段落。
        *   `OpenAIResponseDisplay`：顯示 OpenAI API 回應。

2.  **檔案讀取功能**
    *   技術規格：使用 JavaScript `FileReader` API 讀取檔案內容。
    *   流程：
        1.  使用者拖曳檔案到 `FileDropArea`。
        2.  `FileDropArea` 觸發 `onDrop` 事件。
        3.  使用 `FileReader` 異步讀取檔案內容。
        4.  讀取完成後，將內容傳遞給 `TranscriptDisplay` 顯示。
    *   錯誤處理：
        *   檔案讀取失敗：顯示錯誤訊息。
        *   不支援的檔案類型：顯示錯誤訊息。

3.  **檔案類型驗證**
    *   技術規格：使用 JavaScript 檢查檔案的 `type` 屬性。
    *   驗證規則：
        *   只允許 `.txt` 和 `.vtt` 檔案。
    *   錯誤處理：
        *   如果檔案類型不符合，顯示錯誤訊息，並清除檔案拖曳區域的內容。

4.  **逐字稿切割功能**
    *   技術規格：使用 `spilit.js` 程式碼切割逐字稿。
    *   流程：
        1.  從 `TranscriptDisplay` 取得原始逐字稿內容。
        2.  呼叫 `splitTranscriptByTokenLimit` 函數，設定 `maxTokens` 參數（預設值：1800）。
        3.  將切割後的段落傳遞給 `ChunkDisplay` 顯示。
    *   參數設定：
        *   `maxTokens`：可調整的最大 Token 數。

5.  **OpenAI API 整合**
    *   技術規格：
        *   使用 JavaScript `fetch` API 或 `axios` 庫發送 API 請求。
        *   使用環境變數儲存 OpenAI API 金鑰 (`OPENAI_API_KEY`)。
    *   流程：
        1.  使用者在 `ChunkDisplay` 選擇要傳送的段落。
        2.  建立 API 請求：
            *   方法：`POST`
            *   端點：`https://api.openai.com/v1/completions` (範例，根據實際 API 調整)
            *   請求頭：
                *   `Content-Type`: `application/json`
                *   `Authorization`: `Bearer ${process.env.OPENAI_API_KEY}`
            *   請求體：
                ```json
                {
                  "model": "text-davinci-003", (範例，根據實際 API 調整)
                  "prompt": "使用者選擇的段落",
                  "max_tokens": 150, (範例，根據實際 API 調整)
                  "temperature": 0.7 (範例，根據實際 API 調整)
                }
                ```
        3.  發送 API 請求。
        4.  接收 API 回應。
        5.  將 API 回應傳遞給 `OpenAIResponseDisplay` 顯示。
    *   錯誤處理：
        *   API 請求失敗：
            *   顯示錯誤訊息，包含錯誤碼和錯誤訊息。
            *   記錄錯誤日誌。
        *   API 回應格式錯誤：
            *   顯示錯誤訊息。
            *   記錄錯誤日誌。
    *   安全性考量：
        *   不要在前端程式碼中直接暴露 API 金鑰。
        *   使用伺服器端代理來發送 API 請求，避免跨域問題。

6.  **使用者互動**
    *   段落選擇：允許使用者選擇一個或多個段落。
        *   使用 Checkbox 或其他 UI 元素實現段落選擇功能。
    *   傳送按鈕：提供一個按鈕，使用者點擊後將選擇的段落傳送到 OpenAI API。
    *   載入指示器：在 API 請求期間顯示載入指示器。

7.  **錯誤處理**
    *   全域錯誤處理：使用 `try...catch` 區塊捕獲並處理所有可能發生的錯誤。
    *   錯誤訊息顯示：使用 UI 元素（例如：Alert）顯示錯誤訊息。

8.  **樣式設計**
    *   整體風格：現代感、簡約、黑底。
    *   配色方案：
        *   背景：深黑色 (`#000000` 或 `#121212`)
        *   文字：亮白色 (`#FFFFFF` 或 `#F5F5F5`)
        *   強調色：鮮豔的藍色或綠色 (`#007BFF` 或 `#28A745`)
        *   使用 Tailwind CSS 的 `dark` 模式，實現深色主題。
    *   字體：
        *   使用無襯線字體，例如 `Arial` 或 `Helvetica Neue`。
        *   字體大小：適中，易於閱讀。
    *   間距：
        *   使用適當的間距，使內容清晰易讀。
        *   行距：1.5 倍行高。
    *   響應式設計：
        *   使用 Tailwind CSS 的響應式工具，確保網頁在不同尺寸的螢幕上都能正常顯示。
        *   針對移動設備進行優化。
    *   元件樣式：
        *   按鈕：使用圓角、陰影和 hover 效果。
        *   輸入框：使用深色背景和淺色文字。
        *   卡片：使用深色背景和淺色邊框。
